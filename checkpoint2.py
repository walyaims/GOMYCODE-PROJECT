# -*- coding: utf-8 -*-
"""Checkpoint2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vddQ4wjgiK5k8HwO7fsPl0v3U0cSIoYi

#question 1

Écrivonns un programme qui trouvera tous les nombres divisibles par 7 mais qui ne sont pas un multiple de 5, entre 2000 et 3200 (tous deux inclus). Les nombres obtenus doivent être imprimés dans une liste.
"""

for x in range(2000, 3200):
  print(x)

for x in range(2000, 3200):
   if (x%7==0 ) & (x%5!=0):
     print(x)

"""#question 2

Écrivons un programme capable de calculer la factorielle d'un nombre donné. (La factorielle de n est le produit de tous les entiers positifs inférieurs ou égaux à n.) Par exemple : Pour factorielle(5)= 5 x 4 x 3 x 2 x 1, le résultat est 120 (c'est-à-dire factorielle (0)=1 ).
"""

x=(20)
x=20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1
print(x)

W=(5)
w= 5 *4 * 3 * 2 * 1
print(w)

def factorielle(n):
    if n == 0:
        return 1
    else:
        return n  * factorielle(n-1)

n=5
print(n  * factorielle(n-1))

n=10
print(n  * factorielle(n-1))

n=20
print(n  * factorielle(n-1))

"""#question 3

Avec un nombre entier n donné, écrivez un programme pour générer un dictionnaire contenant (i, i*i) tel qu'il soit un nombre entier compris entre 1 et n (tous deux inclus). Ensuite, le programme devrait imprimer le dictionnaire. Supposons que l'entrée suivante soit fournie au programme : 8 Ensuite, la sortie doit être : {1 : 1, 2 : 4, 3 : 9, 4 : 16, 5 : 25, 6 : 36, 7 : 49, 8 : 64 }  
"""

# on demande à l'utilisateur de saisir un entier n
n = int(input("Entrer la valeur de n"))

# on crée un dictionnaire vide qui va contenir les nombre n et leurs carrée
d = dict({})

# on fait le parcourt des entiers de 1 à n
for i in range(1 , n+1):
    d[i] = i*i

print(d)

"""#Question 4

Étant donné une chaîne non vide et un n intégral, renvoie une nouvelle chaîne où le caractère à l'index n a été supprimé. La valeur de n sera un index valide d'un caractère dans la chaîne d'origine (c'est-à-dire que n sera compris entre 0..len(str)-1 inclus).

manquant_char('kitten', 1) → 'ktten' par exemple ici on supprime le "i" qui se situe dans l'index 1

manquant_char('kitten', 0) → 'itten' ici on supprime "k" qui est dans l'index 0

manquant_char('kitten', 4) → 'kittn' ici on supprime "e" qui est dans l'index 4
"""

n = 'kitten'
char= n[1]
char

char=n[0]
char

char= n[4]
char

i = 1
n[i]

n[i+1]

len(n)

longueur=len(n)
dernier =n[longueur - 1]
dernier

index = 0
while index < len(n):
    char = n[index]
    print(char)
    index = index + 1

"""#Question 5

Écrivez un programme NumPy pour convertir un tableau NumPy en une structure de liste Python.

Production attendue:

Éléments du tableau d'origine : [[0 1] [2 3] [4 5]]

Tableau vers liste : [[0, 1], [2, 3], [4, 5]]


Astuce : Nous pouvons utiliser la fonction to_list() pour assurer la conversion.
"""

import numpy as np
a=np.array([[0 ,1] ,[2 ,3], [4, 5]])
a

a.tolist()

"""#Question 6

Écrivez un programme NumPy pour calculer la matrice de covariance de deux tableaux donnés.

Tableau d'origine1 : [0 1 2]

Tableau d'origine2 : [2 1 0]

Matrice de covariance desdits tableaux : [[ 1. -1.] [-1. 1.]]


Astuce : nous pouvons utiliser la fonction np.cov() pour calculer la covariance entre ces deux tableaux
"""

import numpy as np
A=np.array([[0 ,1, 2] ,[2 ,1, 0]])
A.tolist()

np.cov(A)

"""#Question 7

Question : Écrivez un programme qui calcule et imprime la valeur selon la formule donnée : Q= Racine carrée de [(2 * C * D)/H]

Voici les valeurs fixes de C et H : C vaut 50. H vaut 30.

D est la variable dont les valeurs doivent être saisies dans votre programme dans une séquence séparée par des virgules. (Cela signifie que D contient plus de valeur)

Exemple : Supposons que la séquence d'entrée suivante, séparées par des virgules, soit donnée au programme : 100,150,180. La sortie du programme doit être 18,22,24.

Pour mieux expliquer cela, nous obtiendrons un résultat pour chaque valeur de D : Q1= Racine carrée de [(2 * C * 100)/H] =18, Q2= Racine carrée de [(2 * C * 150)/H ] = 22 et Q3 = Racine carrée de [(2 * C * 180)/H] = 24

Astuce : Si le résultat reçu est sous forme décimale, il doit être arrondi à la valeur la plus proche. Par exemple, si la sortie reçue est 26,0, elle doit être imprimée comme 26. Dans le cas où des données d'entrée sont fournies à la question, il convient de supposer qu'il s'agit d'une entrée de console.
"""

#On a Q= Racine carrée de [(2 * C * D)/H]
import math
D=[100, 150, 180]
b = []
for i in D:
    b.append(math.sqrt(i))
print(b)

import math
D=[100, 150, 180]
racine_carre=[math.sqrt(i) for i in D]
for i in D:
  print("la racine carrée de ",i,"est:",math.sqrt(i))

C=50
H=30
Q=math.sqrt ((2*C*100)/H)
Q1=round(Q)
print(Q1)

Q=math.sqrt ((2*C*150)/H)
Q2=round(Q)
Q2

Q=math.sqrt ((2*C*180)/H)
Q3=round(Q)
Q3